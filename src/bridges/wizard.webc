---
layout: layout.webc
permalink: /bridges/index.html
title: Bridge Finder @ blakes.dev
metaTitle: Bridge Finder
metaDescription: Find and use public bridges and gateways for decentralized/federated web protocols, like ActivityPub, Matrix, and more.
---
<div class="group bg-scheme-2 text-onscheme-2 absolute z-100 w-0 h-0 top-0 left-0 print:hidden flex flex-col focus-within:w-auto focus-within:h-auto overflow-hidden">
  <a class="focus:bg-primary-3 focus:text-onprimary-3 p-2" href="#contents">Skip to content</a>
</div>
<blakes-menubar :@url="page.url"></blakes-menubar>
<is-land on:visible on:idle><blakes-theme-switcher-button disabled></blakes-theme-switcher-button><template data-island="replace">
  <blakes-theme-switcher-button disabled></blakes-theme-switcher-button>
  <blakes-theme-switcher></blakes-theme-switcher>
</template></is-land>
<article class="prose dark:prose-invert m-auto mt-8" id="contents">
  <center><h1>Bridge Tool</h1></center>
  <p>This tool is intended to help you find and use public gateways and bridges between different services and protocols.</p>
  <noscript>
    <p class="text-red-500 dark:text-red-400"></p>Since JavaScript is disabled, the wizard won't work. You can instead look at the <a href="/bridges/list/">list of all known bridges</a>.</p>
  </noscript>
  <p class="mb-4">Select the service or app <em>YOU</em> use to get started.</p>
  <div class="grid grid-cols-2 gap-4">
    <h2 class="col-span-full mt-1 mb-1">Social</h2>
    <bridge-wizard-card @platform="activitypub" webc:if="bridges.filter((v) => v.to == 'activitypub').length > 0" href="#to=activitypub"></bridge-wizard-card>
    <bridge-wizard-card @platform="nostr" webc:if="bridges.filter((v) => v.to == 'nostr').length > 0" href="#to=nostr"></bridge-wizard-card>
    <bridge-wizard-card @platform="atproto" webc:if="bridges.filter((v) => v.to == 'atproto').length > 0" href="#to=atproto"></bridge-wizard-card>
    <h2 class="col-span-full mt-0 mb-1">Messaging</h2>
    <bridge-wizard-card @platform="matrix" webc:if="bridges.filter((v) => v.to == 'matrix').length > 0" href="#to=matrix"></bridge-wizard-card>
    <bridge-wizard-card @platform="xmpp" webc:if="bridges.filter((v) => v.to == 'xmpp').length > 0" href="#to=xmpp"></bridge-wizard-card>
    <!-- <h2 class="col-span-full">Other</h2>
    <a class="X-Card rounded-md p-4 bg-red-300 dark:bg-red-900" href="#from=email">Email</a>
    <a class="X-Card rounded-md p-4 bg-orange-300 dark:bg-orange-900" href="#from=rss">RSS</a> -->
  </div>
</article>
<div class="m-8"></div>
<script type="module" webc:keep>
  import { bridges } from './data.json';
  import { WizardCard } from '../scripts/components/bridges/wizard-card';
  import * as wizard2 from '../scripts/components/bridges/page-to-service';
  import * as wizard3 from '../scripts/components/bridges/ask-id';
  import { html, render } from 'htm/preact';
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll("[href^='#to=']").forEach((e) => e.addEventListener('click', (e) => {
      e.preventDefault();
      const toService = new URL(e.currentTarget.href).hash.split('=')[1];
      //console.warn(href);
      const d = document.querySelector('#contents');
      d.innerHTML = '';
      render(wizard2.wizardToServicePage(toService, bridges), d);
      document.querySelectorAll("[href^='#from=']").forEach((e) => e.addEventListener('click', (e) => {
        e.preventDefault();
        const fromService = new URL(e.currentTarget.href).hash.split('=')[1];
        //console.warn(href);
        d.innerHTML = '';
        //render(wizard2.wizardFromServicePage(href, bridges), d);
        // TODO: render the third page of the wizard, depending on what bridge it is
        // if (toService == 'matrix' && fromService == 'xmpp') {/* ask for ID and whether it's a room or user */}
        // else {/* ask for ID, then run conversion */}
        //render(wizard3.wizardAskIdPage(toService, fromService, bridges.filter((v) => v.to == toService && v.from == fromService), {rerenderTarget: d}), d);
        render(html`<${wizard3.askIdPage} to=${toService} from=${fromService} bridges=${bridges.filter((v) => v.to == toService && v.from == fromService)} rerenderTarget=${d}><//>`, d);
        // wizardAskIDPage runs the conversion and renders the result
      }));
    }));
  }, false);
</script>